name: Main Workflow

permissions:
  security-events: write
  pull-requests: read
  contents: write
  id-token: write
  statuses: write
  actions: read
  pages: write

on:
  push:
    branches:
      - stg
  workflow_dispatch:

jobs:
  # unit-test:
  #   uses: ./.github/workflows/ci-test.yml
  
  # sca-test:
  #   needs: unit-test
  #   uses: ./.github/workflows/ci-soos-sca.yml
  #   secrets:
  #     client_id: ${{ secrets.SOOS_CLIENT_ID }}
  #     api_key: ${{ secrets.SOOS_API_KEY }}

  # sast-test:
  #   needs: sca-test
  #   uses: ./.github/workflows/ci-sonarcloud-sast.yml
  #   secrets:
  #     GIT_HUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }} 
  #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # build-image-staging:
  #   needs: sast-test
  #   uses: ./.github/workflows/ci-build-deploy.yml
  #   with:
  #     docker_image: 'docker.io/airist/laracamp:staging-${{ github.run_number }}'
  #   secrets:
  #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} 

  # deploy-staging:
  #   needs: build-image-staging
  #   uses: ./.github/workflows/deploy-staging.yml
  #   secrets:
  #     GIT_HUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
  #     GIT_HUB_USERNAME: ${{ secrets.GIT_HUB_USERNAME }}
  #     ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }} 
  #     ARGOCD_USER: ${{ secrets.ARGOCD_USER }} 
  #     ARGOCD_PASS: ${{ secrets.ARGOCD_PASS }} 

  # dast-test:
  #   needs: deploy-staging
  #   uses: ./.github/workflows/dast-scan-website.yml
  #   secrets:
  #     client_id: ${{ secrets.SOOS_CLIENT_ID }}
  #     api_key: ${{ secrets.SOOS_API_KEY }}
  
  notify-on-telegram:
    runs-on: ubuntu-latest
    env:
      BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHATID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Notify Success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot$BOT_TOKEN/sendMessage \
            -d chat_id=$TELEGRAM_CHATID \
            -d parse_mode=markdown \
            -d text='Dear team : \nCICD Pipeline *${{ github.workflow }}* \nBranch : *${{ github.ref_name }}* \nStatus job : *Success* \nTotal Time : *${{ steps.build.outputs.duration }}* \n\n*More info* at : ${{ github.run_url }}'

      - name: Notify Failure
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot$BOT_TOKEN/sendMessage \
            -d chat_id=$TELEGRAM_CHATID \
            -d parse_mode=markdown \
            -d text='Dear team : \nCICD Pipeline *${{ github.workflow }}* \nBranch : *${{ github.ref_name }}* \nStatus job : *Failed* \nTotal Time : *${{ steps.build.outputs.duration }}* \n\n*More info* at : ${{ github.run_url }}'

      - name: Notify Cancelled
        if: cancelled()
        run: |
          curl -s -X POST https://api.telegram.org/bot$BOT_TOKEN/sendMessage \
            -d chat_id=$TELEGRAM_CHATID \
            -d parse_mode=markdown \
            -d text='Dear team : \nCICD Pipeline *${{ github.workflow }}* \nBranch : *${{ github.ref_name }}* \nStatus job : *Aborted* \nTotal Time : *${{ steps.build.outputs.duration }}* \n\n*More info* at : ${{ github.run_url }}'